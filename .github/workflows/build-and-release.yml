name: Build and Release
on:
  push:
    paths-ignore:
      - "docs/**"

env:
  NO_PRINT_PROGRESS: 1
  SERVER_REPO_PATH: ${{secrets.SERVER_REPO_PATH}}
  SERVER_REPO_URL: ${{secrets.SERVER_REPO_URL}}
  OSTREE_REPO: ${{secrets.OSTREE_REPO}}
  OSTREE_GPG: ${{secrets.OSTREE_GPG}}

jobs:
  build:
    name: Build Collection
    runs-on: self-hosted
    timeout-minutes: 47000

    steps:
      - uses: actions/checkout@v1

      - name: Configure Version
        run: |
          VERSION="${GITHUB_REF#refs/*/}"
          if [ $VERSION != "stable" ] ; then
            VERSION="experimental"
          fi
          cat > version.yml << EOF
          version: ${VERSION}
          variables:
            ostree-branch: "x86_64/os/${VERSION}"
          EOF

          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build cache
        run: |
          pkgupd ignite build collections/xfce4.yml
      
      - name: Update Ostree
        run: |
          pkgupd ignite build system/ostree-config.yml

          echo "${{ github.event.head_commit.message }}" > commit_message

          OSTREE_BRANCH="x86_64/os/${VERSION}" make update-ostree

      - name: Update Extensions
        run: |
          for ext in sdk ; do
            OSTREE_BRANCH="x86_64/extension/${ext}/${VERSION}" \
            ELEMENT_FILE=extensions/${ext}.yml make update-ostree
          done

  build-installer-iso:
    name: Build Installer ISO
    runs-on: self-hosted
    timeout-minutes: 47000
    environment: deploy
    needs: [build]
    if: github.ref == 'refs/heads/stable'
    strategy:
      matrix:
        variant: 
          - pkgupd
          - ostree
    steps:
      - uses: actions/checkout@v1

      - name: Configure Version
        run: |
          VERSION="${GITHUB_REF#refs/*/}"
          if [ $VERSION != "stable" ] ; then
            VERSION="experimental"
          fi
          cat > version.yml << EOF
          version: ${VERSION}
          variables:
            ostree-branch: "x86_64/os/${VERSION}"
          EOF

          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build Installer ISO
        run: pkgupd ignite build installer/${{matrix.variant}}.yml

      - name: Update installer ISO
        run: |
          pkgupd ignite checkout installer/${{matrix.variant}}.yml ${SERVER_REPO_PATH}/releases/${VERSION}/${{matrix.variant}}
          (cd ${SERVER_REPO_PATH}/releases/${VERSION}/${{matrix.variant}}/; zsyncmake -b 2048 -C -u ${SERVER_REPO_URL}/releases/${VERSION}/${{matrix.variant}}/rlxos-${VERSION}-${{matrix.variant}}-installer.iso rlxos-${VERSION}-${{matrix.variant}}-installer.iso)

  update-market:
    name: Update Market
    runs-on: self-hosted
    needs: [build-installer-iso]
    if: github.ref == 'refs/heads/stable'
    steps:
      - uses: actions/checkout@v1
      - name: Configure Version
        run: |
          VERSION="${GITHUB_REF#refs/*/}"
          if [ $VERSION != "stable" ] ; then
            VERSION="experimental"
          fi
          cat > version.yml << EOF
          version: ${VERSION}
          variables:
            ostree-branch: "x86_64/os/${VERSION}"
          EOF

          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build registered AppImages
        run: |-
          pkgupd ignite meta ${SERVER_REPO_PATH}/${VERSION}

      - name: Extract icons
        run: ./scripts/extract-icons.sh ${SERVER_REPO_PATH}/apps/ ${SERVER_REPO_PATH}/icons/