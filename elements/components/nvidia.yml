id: nvidia
merge: [elements/include/nvidia.inc]
about: NVIDIA drivers and utilities
strip: false
depends:
  - components/egl-wayland.yml
  - components/libglvnd.yml
  - components/x11/xserver.yml
build-depends:
  - kernel/linux.yml
  - components/gcc.yml

environ:
  - TAR_OPTIONS=--no-same-owner --no-same-permissions

build-dir: "."

sources:
  - https://us.download.nvidia.com/XFree86/Linux-x86_64/%{version}/NVIDIA-Linux-x86_64-%{version}.run
  - files/sign-keys/modules/linux-module-cert.crt
  - files/sign-keys/linux-module-cert.key

script: |-
  sh NVIDIA-Linux-x86_64-%{version}.run -x
  cd NVIDIA-Linux-x86_64-%{version}/kernel

  KERNEL_VERSION=$(ls -1 %{libdir}/modules/ | head -n1)

  make KERNEL_UNAME=$KERNEL_VERSION modules
  make -j1 modules_install INSTALL_MOD_PATH=%{install-root}%{prefix} KERNEL_UNAME=$KERNEL_VERSION

  openssl x509 -inform PEM -outform DER -in %{build-root}/linux-module-cert.crt -out linux-module-cert.cer
  find '%{install-root}%{libdir}/modules' -type f -name "*.ko" -exec %{libdir}/modules/${KERNEL_VERSION}/source/scripts/sign-file sha512 %{build-root}/linux-module-cert.key linux-module-cert.cer {} ';' -exec xz --lzma2=dict=2MiB {} ';'

  cd ..
  tar -xf nvidia-persistenced-init.tar.bz2

  install -Dm644 nvidia.icd "%{install-root}%{sysconfdir}/OpenCL/vendors/nvidia.icd"
  install -Dm755 "libnvidia-opencl.so.%{version}" "%{install-root}/usr/lib/libnvidia-opencl.so.%{version}"

  install -Dm755 nvidia_drv.so "%{install-root}/usr/lib/xorg/modules/drivers/nvidia_drv.so"

  # Wayland/GBM
  install -Dm755 libnvidia-egl-gbm.so.1* -t "%{install-root}/usr/lib/"
  install -Dm644 15_nvidia_gbm.json "%{install-root}%{datadir}/egl/egl_external_platform.d/15_nvidia_gbm.json"
  mkdir -p "%{install-root}/usr/lib/gbm"
  ln -sr "%{install-root}/usr/lib/libnvidia-allocator.so.%{version}" "%{install-root}/usr/lib/gbm/nvidia-drm_gbm.so"

  # firmware
  install -Dm644 -t "%{install-root}/usr/lib/firmware/nvidia/%{version}/" firmware/*.bin 

  # GLX extension module for X
  install -Dm755 "libglxserver_nvidia.so.%{version}" "%{install-root}/usr/lib/nvidia/xorg/libglxserver_nvidia.so.%{version}"
  # Ensure that X finds glx
  ln -s "libglxserver_nvidia.so.%{version}" "%{install-root}/usr/lib/nvidia/xorg/libglxserver_nvidia.so.1"
  ln -s "libglxserver_nvidia.so.%{version}" "%{install-root}/usr/lib/nvidia/xorg/libglxserver_nvidia.so"

  install -Dm755 "libGLX_nvidia.so.%{version}" "%{install-root}/usr/lib/libGLX_nvidia.so.%{version}"

  # OpenGL libraries
  install -Dm755 "libEGL_nvidia.so.%{version}" "%{install-root}/usr/lib/libEGL_nvidia.so.%{version}"
  install -Dm755 "libGLESv1_CM_nvidia.so.%{version}" "%{install-root}/usr/lib/libGLESv1_CM_nvidia.so.%{version}"
  install -Dm755 "libGLESv2_nvidia.so.%{version}" "%{install-root}/usr/lib/libGLESv2_nvidia.so.%{version}"
  install -Dm644 "10_nvidia.json" "%{install-root}%{datadir}/glvnd/egl_vendor.d/10_nvidia.json"

  # OpenGL core library
  install -Dm755 "libnvidia-glcore.so.%{version}" "%{install-root}/usr/lib/libnvidia-glcore.so.%{version}"
  install -Dm755 "libnvidia-eglcore.so.%{version}" "%{install-root}/usr/lib/libnvidia-eglcore.so.%{version}"
  install -Dm755 "libnvidia-glsi.so.%{version}" "%{install-root}/usr/lib/libnvidia-glsi.so.%{version}"

  # misc
  install -Dm755 "libnvidia-api.so.1" "%{install-root}/usr/lib/libnvidia-api.so.1"
  install -Dm755 "libnvidia-fbc.so.%{version}" "%{install-root}/usr/lib/libnvidia-fbc.so.%{version}"
  install -Dm755 "libnvidia-encode.so.%{version}" "%{install-root}/usr/lib/libnvidia-encode.so.%{version}"
  install -Dm755 "libnvidia-cfg.so.%{version}" "%{install-root}/usr/lib/libnvidia-cfg.so.%{version}"
  install -Dm755 "libnvidia-ml.so.%{version}" "%{install-root}/usr/lib/libnvidia-ml.so.%{version}"
  install -Dm755 "libnvidia-glvkspirv.so.%{version}" "%{install-root}/usr/lib/libnvidia-glvkspirv.so.%{version}"
  install -Dm755 "libnvidia-allocator.so.%{version}" "%{install-root}/usr/lib/libnvidia-allocator.so.%{version}"
  install -Dm755 "libnvidia-gpucomp.so.%{version}" "%{install-root}/usr/lib/libnvidia-gpucomp.so.%{version}"

  # Vulkan ICD
  install -Dm644 "nvidia_icd.json" "%{install-root}%{datadir}/vulkan/icd.d/nvidia_icd.json"
  install -Dm644 "nvidia_layers.json" "%{install-root}%{datadir}/vulkan/implicit_layer.d/nvidia_layers.json"

  # VDPAU
  install -Dm755 "libvdpau_nvidia.so.%{version}" "%{install-root}/usr/lib/vdpau/libvdpau_nvidia.so.%{version}"

  # nvidia-tls library
  install -Dm755 "libnvidia-tls.so.%{version}" "%{install-root}/usr/lib/libnvidia-tls.so.%{version}"

  # CUDA
  install -Dm755 "libcuda.so.%{version}" "%{install-root}/usr/lib/libcuda.so.%{version}"
  install -Dm755 "libnvcuvid.so.%{version}" "%{install-root}/usr/lib/libnvcuvid.so.%{version}"
  install -Dm755 "libcudadebugger.so.%{version}" "%{install-root}/usr/lib/libcudadebugger.so.%{version}"

  # PTX JIT Compiler (Parallel Thread Execution (PTX) is a pseudo-assembly language for CUDA)
  install -Dm755 "libnvidia-ptxjitcompiler.so.%{version}" "%{install-root}/usr/lib/libnvidia-ptxjitcompiler.so.%{version}"

  # raytracing
  install -Dm755 "nvoptix.bin" "%{install-root}/usr/share/nvidia/nvoptix.bin"
  install -Dm755 "libnvoptix.so.%{version}" "%{install-root}/usr/lib/libnvoptix.so.%{version}"
  install -Dm755 "libnvidia-rtcore.so.%{version}" "%{install-root}/usr/lib/libnvidia-rtcore.so.%{version}"

  # NGX
  install -Dm755 nvidia-ngx-updater "%{install-root}/usr/bin/nvidia-ngx-updater"
  install -Dm755 "libnvidia-ngx.so.%{version}" "%{install-root}/usr/lib/libnvidia-ngx.so.%{version}"
  install -Dm755 _nvngx.dll "%{install-root}/usr/lib/nvidia/wine/_nvngx.dll"
  install -Dm755 nvngx.dll "%{install-root}/usr/lib/nvidia/wine/nvngx.dll"

  # Optical flow
  install -Dm755 "libnvidia-opticalflow.so.%{version}" "%{install-root}/usr/lib/libnvidia-opticalflow.so.%{version}"

  # Crypto libraries
  install -Dm755 "libnvidia-pkcs11.so.%{version}" "%{install-root}/usr/lib/libnvidia-pkcs11.so.%{version}"
  install -Dm755 "libnvidia-pkcs11-openssl3.so.%{version}" "%{install-root}/usr/lib/libnvidia-pkcs11-openssl3.so.%{version}"

  # DEBUG
  install -Dm755 nvidia-debugdump "%{install-root}/usr/bin/nvidia-debugdump"

  # nvidia-xconfig
  install -Dm755 nvidia-xconfig "%{install-root}/usr/bin/nvidia-xconfig"
  install -Dm644 nvidia-xconfig.1.gz "%{install-root}%{datadir}/man/man1/nvidia-xconfig.1.gz"

  # nvidia-bug-report
  install -Dm755 nvidia-bug-report.sh "%{install-root}/usr/bin/nvidia-bug-report.sh"

  # nvidia-smi
  install -Dm755 nvidia-smi "%{install-root}/usr/bin/nvidia-smi"
  install -Dm644 nvidia-smi.1.gz "%{install-root}%{datadir}/man/man1/nvidia-smi.1.gz"

  # nvidia-cuda-mps
  install -Dm755 nvidia-cuda-mps-server "%{install-root}/usr/bin/nvidia-cuda-mps-server"
  install -Dm755 nvidia-cuda-mps-control "%{install-root}/usr/bin/nvidia-cuda-mps-control"
  install -Dm644 nvidia-cuda-mps-control.1.gz "%{install-root}%{datadir}/man/man1/nvidia-cuda-mps-control.1.gz"

  # nvidia-modprobe
  # This should be removed if nvidia fixed their uvm module!
  install -Dm4755 nvidia-modprobe "%{install-root}/usr/bin/nvidia-modprobe"
  install -Dm644 nvidia-modprobe.1.gz "%{install-root}%{datadir}/man/man1/nvidia-modprobe.1.gz"

  # nvidia-persistenced
  install -Dm755 nvidia-persistenced "%{install-root}/usr/bin/nvidia-persistenced"
  install -Dm644 nvidia-persistenced.1.gz "%{install-root}%{datadir}/man/man1/nvidia-persistenced.1.gz"
  install -Dm644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template "%{install-root}/usr/lib/systemd/system/nvidia-persistenced.service"
  sed -i 's/__USER__/nvidia-persistenced/' "%{install-root}/usr/lib/systemd/system/nvidia-persistenced.service"

  # application profiles
  install -Dm644 nvidia-application-profiles-%{version}-rc "%{install-root}%{datadir}/nvidia/nvidia-application-profiles-%{version}-rc"
  install -Dm644 nvidia-application-profiles-%{version}-key-documentation "%{install-root}%{datadir}/nvidia/nvidia-application-profiles-%{version}-key-documentation"

  install -Dm644 LICENSE "%{install-root}%{datadir}/licenses/nvidia-utils/LICENSE"
  install -Dm644 README.txt "%{install-root}%{datadir}/doc/nvidia/README"
  install -Dm644 NVIDIA_Changelog "%{install-root}%{datadir}/doc/nvidia/NVIDIA_Changelog"
  cp -r html "%{install-root}%{datadir}/doc/nvidia/"
  ln -s nvidia "%{install-root}%{datadir}/doc/nvidia-utils"

  # new power management support
  install -Dm644 systemd/system/*.service -t "%{install-root}/usr/lib/systemd/system"
  install -Dm755 systemd/system-sleep/nvidia "%{install-root}/usr/lib/systemd/system-sleep/nvidia"
  install -Dm755 systemd/nvidia-sleep.sh "%{install-root}/usr/bin/nvidia-sleep.sh"
  install -Dm755 nvidia-powerd "%{install-root}/usr/bin/nvidia-powerd"
  install -Dm644 nvidia-dbus.conf "%{install-root}"%{datadir}/dbus-1/system.d/nvidia-dbus.conf

  # distro specific files must be installed in %{datadir}/X11/xorg.conf.d
  install -Dm644 /dev/stdin "%{install-root}%{datadir}/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf" << "EOF"
  Section "OutputClass"
    Identifier "nvidia"
    MatchDriver "nvidia-drm"
    Driver "nvidia"
    Option "AllowEmptyInitialConfiguration"
    ModulePath "/usr/lib/nvidia/xorg"
    ModulePath "/usr/lib/xorg/modules"
  EndSection
  EOF

  install -Dm644 /dev/stdin "%{install-root}"/usr/lib/udev/rules.d/60-nvidia.rules << "EOF"
  # Device nodes are created by nvidia-modprobe, which is called by the nvidia DDX.
  # In case the DDX is not started, the device nodes are never created, so call
  # nvidia-modprobe in the udev rules to cover the Wayland/EGLStream and compute
  # case without a started display. In the case where vfio-pci is used
  # nvidia-modprobe should not be invoked.
  ACTION=="add|bind", ATTR{vendor}=="0x10de", ATTR{class}=="0x03[0-9]*", \
      DRIVER=="nvidia", TEST!="/dev/nvidia-uvm", \
      RUN+="/usr/bin/nvidia-modprobe", \
      RUN+="/usr/bin/nvidia-modprobe -c0 -u"
  EOF

  install -Dm644 /dev/stdin "%{install-root}/usr/lib/modprobe.d/%{id}.conf" << "EOF"
  blacklist nouveau
  options nvidia_drm modeset=1
  options nvidia NVreg_PreserveVideoMemoryAllocations=1
  EOF

  install -Dm644 /dev/stdin "%{install-root}/usr/lib/modules-load.d/%{id}.conf" << "EOF"
  nvidia_drm

  EOF


  find "%{install-root}" -type f -name '*.so*' ! -path '*xorg/*' -print0 | while read -d $'\0' _lib; do
    _soname=$(dirname "${_lib}")/$(readelf -d "${_lib}" | grep -Po 'SONAME.*: \[\K[^]]*' || true)
    _base=$(echo ${_soname} | sed -r 's/(.*)\.so.*/\1.so/')
    [[ -e "${_soname}" ]] || ln -s $(basename "${_lib}") "${_soname}"
    [[ -e "${_base}" ]] || ln -s $(basename "${_soname}") "${_base}"
  done


  install -Dm 0755 /dev/stdin %{install-root}%{bindir}/prime-run << "EOF"
  #!/bin/sh
  export __NV_PRIME_RENDER_OFFLOAD=1
  export __GLX_VENDOR_LIBRARY_NAME=nvidia
  export __VK_LAYER_NV_optimus=NVIDIA_only
  export VK_ICD_FILENAMES=%{datadir}/vulkan/icd.d/nvidia_icd.json
  exec "$@"
  EOF